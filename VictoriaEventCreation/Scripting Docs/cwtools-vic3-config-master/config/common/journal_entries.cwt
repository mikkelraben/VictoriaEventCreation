types = {
    type[journal_entry] = {
        path = "game/common/journal_entries"
    }
}
## replace_scope = { ROOT = country THIS = country }
journal_entry = {
    #TODO image
    ## cardinality = 0..1
	### optional image that shows in the journal entry widget near the description, default = NDefines::GUI::JOURNAL_ENTRY_ICON_DEFAULT (set in /defines/00_interfaces.txt)
    icon = scalar

    ## cardinality = 0..1
    ### optional trigger which determines if a journal entry can be shown, default = no
	### is ignored when JE is added through `add_journal_entry` effect
    is_shown_when_inactive = single_alias_right[trigger_clause]

    ## cardinality = 0..1
    ### optional trigger - when both this and is_shown_when_inactive is true, the JE is Activated, default = yes
	### is ignored when JE is added through `add_journal_entry` effect
    possible = single_alias_right[trigger_clause]

    ## cardinality = 0..1
    ### effect which happens when a journal entry is activated by having its `is_shown_when_inactive` and `possible` triggers become true or when JE is added through `add_journal_entry` effect
    immediate = single_alias_right[effect_clause]

    ## cardinality = 0..1
    ### completion trigger, use is_goal_complete = yes in here if you're testing a tracked goal metric; if left blank, cannot be completed
    complete = single_alias_right[trigger_clause]

    ## cardinality = 0..1
    ### effect which is executed when 'complete' trigger becomes true
    on_complete = single_alias_right[effect_clause]

    ## cardinality = 0..1
    ### failure trigger, should spawn event explaining what happens when triggered, framed as a failure; if left blank, cannot fail
    fail = single_alias_right[trigger_clause]

    ## cardinality = 0..1
    ### effect which is executed when 'fail' trigger becomes true
    on_fail = single_alias_right[effect_clause]

    ## cardinality = 0..1
    ### optional invalidation trigger, should not notify player when it triggers, just clean up and silently disappear due to journal entry no longer being valid; if left blank, cannot be invalidated
    invalid = single_alias_right[trigger_clause]

    ## cardinality = 0..1
    ### effect which is executed when 'invalid' trigger becomes true
    on_invalid = single_alias_right[effect_clause]

    ## cardinality = 0..1
    ### dynamically updated text, which describes the current status of the Journal Entry
	### To use in loc or UI: [JournalEntry.GetStatusDesc]
	### If this is not specified, GetStatusDesc will instead return loc from key <journal_entry_key>_status
    status_desc = single_alias_right[complex_desc]

    ## cardinality = 0..1
    ### the number of days before this journal entry forcibly transitions, can be used to transition silently or into another event, framed either as success, failure, or neutral; if left blank or set to zero, will not time out
    timeout = int

    ## cardinality = 0..1
    ### effect which is executed when journal entry is timed out
    on_timeout = single_alias_right[effect_clause]

    ## cardinality = 0..1
    ### on_action which is triggered every first day of the week
    on_weekly_pulse = single_alias_right[on_action]

    ## cardinality = 0..1
    ### on_action which is triggered every first day of the month
    on_monthly_pulse = single_alias_right[on_action]

    ## cardinality = 0..1
    ### on_action which is triggered every first day of the year
    on_yearly_pulse = single_alias_right[on_action]

    ## cardinality = 0..1
    ### a script value computing the goal completion metric
    current_value = value_field

    ## cardinality = 0..1
    ### a script value determining how much should be added onto current_value when journal entry is granted to set the goal
    goal_add_value = value_field

    ## cardinality = 0..1
    ### the highest weighted active journal entry appears in the goal tracker on the main screen
    weight = int

    ## cardinality = 0..1
    ### yes/no, determines if a newly created country (such as a revolutionary country) should inherit this type of journal entry - note that external dependencies such as country variables etc are not automatically inherited
    inheritable = bool

    ## cardinality = 0..1
    ### optional trigger which determines if a journal entry can be shown, default = no
    is_progressing = single_alias_right[trigger_clause]

    ## cardinality = 0..1
    ### yes/no, if yes, a progress bar is shown
    progressbar = bool

    ## cardinality = 0..1
    ### yes/no, if yes, the Journal Entry can return to an inactive state if its possible trigger reverts to false
    ### if no or unspecified, an activated Journal Entry cannot return to being inactive even if it is no longer considered possible
    can_deactivate = bool

    ## cardinality = 0..1
    ### dynamically updated text, which is shown over the progress bar of the Journal Entry
    ### value can be a localization key or first_valid + triggered_desc script
    ### To use in loc or UI: [JournalEntry.GetProgressDesc]
    ### If this is not specified, GetProgressDesc will instead return loc from key <journal_entry_key>_progress
    progress_desc = single_alias_right[complex_desc]

    ## cardinality = 0..1
    ### tutorial lesson explaining HOW to complete the Journal Entry
    how_tutorial = <tutorial_lesson>

    ## cardinality = 0..1
    ### tutorial lesson explaining the WHY around the Journal Entry
    why_tutorial = <tutorial_lesson>

    ## cardinality = 0..1
    ### whether a Journal Entry should be pinned in its outliner by default. Defaults to 'no'
    should_be_pinned_by_default = bool

    ## cardinality = 0..1
    active_update_frequency = int
}